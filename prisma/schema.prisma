datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    color         String   @default("green")
    pet           String   @default("")
    coins         Int      @default(0)
    currentIntake Intake?
    target        Targets?

    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ownedColors      String[] @default(["green"])
    ownedPets        String[] @default([])
    ownedAccessories String[] @default([])
}

model Intake {
    id       String @id @default(cuid())
    userId   String @unique
    calories Int    @default(0)
    proteins Int    @default(0)
    carbs    Int    @default(0)
    fat      Int    @default(0)
    fiber    Int    @default(0)
    user     User   @relation(fields: [userId], references: [id])
}

model Targets {
    id       String @id @default(cuid())
    userId   String @unique
    calories Int    @default(2500)
    proteins Int    @default(55)
    carbs    Int    @default(300)
    fat      Int    @default(70)
    fiber    Int    @default(30)
    user     User   @relation(fields: [userId], references: [id])
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
